use pretty_assertions::assert_eq;

fn normalize(s: &str) -> String {
    // Convert CRLF to LF, trim trailing spaces on each line, and ensure a single trailing newline
    let s = s.replace("\r\n", "\n");
    let mut out = String::new();
    for (i, line) in s.lines().enumerate() {
        if i > 0 {
            out.push('\n');
        }
        out.push_str(line.trim_end());
    }
    out.push('\n');
    out
}

// Load the case table generated by build.rs
include!(concat!(env!("OUT_DIR"), "/snapshot_cases.rs"));

#[test]
fn snapshot_roundtrip() {
    if CASES.is_empty() {
        eprintln!("(note) no input_*.rs found in tests/snapshot.");
    }
    for case in CASES {
        // Build Program from the snapshot input and render to QASM
        let program = (case.build)();
        let actual = openqasm3::display::to_qasm_string(&program);
        let normalized_actual = normalize(&actual);

        let expected_path = std::path::Path::new(case.expected);
        if std::env::var_os("UPDATE").is_some() {
            std::fs::write(expected_path, &normalized_actual)
                .expect("expected file write failed (UPDATE=1)");
            eprintln!("updated: {} -> {}", case.name, expected_path.display());
            continue;
        }

        let expected = std::fs::read_to_string(expected_path)
            .unwrap_or_else(|_| panic!("missing expected file: {}", expected_path.display()));
        let normalized_expected = normalize(&expected);

        if normalized_actual != normalized_expected {
            // On failure, persist artifacts to target/snapshot_diffs for quick inspection.
            let manifest_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap_or_else(|_| ".".to_string());
            let mut artifacts_dir = std::path::PathBuf::from(manifest_dir);
            artifacts_dir.push("target");
            artifacts_dir.push("snapshot_diffs");
            let _ = std::fs::create_dir_all(&artifacts_dir);

            let safe_name: String = case
                .name
                .chars()
                .map(|c| if c.is_ascii_alphanumeric() || c == '_' || c == '-' { c } else { '_' })
                .collect();
            let actual_out = artifacts_dir.join(format!("{}.actual.qasm", safe_name));
            let expected_out = artifacts_dir.join(format!("{}.expected.qasm", safe_name));
            let _ = std::fs::write(&actual_out, &normalized_actual);
            let _ = std::fs::write(&expected_out, &normalized_expected);
            eprintln!(
                "snapshot mismatch: {} -> wrote artifacts: actual={}, expected_copy={}. To accept: UPDATE=1 cargo test",
                case.name,
                actual_out.display(),
                expected_out.display()
            );
        }

        assert_eq!(
            normalized_actual,
            normalized_expected,
            "snapshot mismatch: {} ({})",
            case.name,
            expected_path.display()
        );
    }
}
